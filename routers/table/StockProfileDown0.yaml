# raw profile as layer 1 trend down

Edges:
    [
        # twse graph
        [0,3,1],
        [1,3,1],
        [2,3,1],
        [3,4,1],

        # otc graph
        [5,8,1],
        [6,8,1],
        [7,8,1],
        [8,9,1]
    ]

Nodes:
    [

        # 0
        'Loader.parse_task(
            "./routers/tasks/HisCredit.yaml",
            kwargs = {
                "opt": "twse",
                "targets": ["credit"],
                "starttime": "datetime.utcnow() - timedelta(days=10)",
                "endtime": "datetime.utcnow()",
                "stockids": "[i for i in iddb_tasks[\"twse\"]().stock.get_ids()]",
                "base": "stock",
                "constraint": "lambda x: x.value[\"ebearfinaratio\"] < 30",
                "order": "lambda x: [+x.value[\"ebearfinaratio\"], -x.value[\"totalbearishremain\"]]",
                "limit": 10
            }
        )',

        # 1
        'Loader.parse_task(
            "./routers/tasks/HisStock.yaml", 
            kwargs = {
                "opt": "twse",
                "targets": ["stock"],
                "starttime": "datetime.utcnow() - timedelta(days=15)",
                "endtime": "datetime.utcnow()",
                "stockids": "[i for i in iddb_tasks[\"twse\"]().stock.get_ids()]",
                "base": "stock",
                "constraint": "lambda x: x.value[\"eclose\"] > 30 and x.value[\"evolume\"] > 500",
                "order": "lambda x: [-x.value[\"totalvolume\"], -x.value[\"eclose\"]]",
                "limit": 10,
            }
        )',

        # 2
        'Loader.parse_task(
            "./routers/tasks/HisFuture.yaml",
            kwargs = {
                "opt": "twse",
                "targets":  ["future"],
                "starttime": "datetime.utcnow() - timedelta(days=5)",
                "endtime": "datetime.utcnow()",
                "stockids": "[i for i in iddb_tasks[\"twse\"]().stock.get_ids()]",
                "base": "stock",
                "constraint": "lambda x: x.value[\"edfcdiff\"] > 0 or x.value[\"totalvolume\"] > 100",
                "order": "lambda x: [-x.value[\"edfcdiff\"], -x.value[\"totalvolume\"]]",
                "limit": 10
            }
        )',

        # 3
        'Loader.parse_task(
            "./routers/tasks/HisTrader.yaml",
            kwargs = {
                "opt": "twse",
                "targets": ["trader"],
                "starttime": "datetime.utcnow() - timedelta(days=5)",
                "endtime": "datetime.utcnow()",
                "stockids": [],
                "traderids": [],
                "base": "stock",
                "constraint": "lambda x: x.value[\"esellratio\"] > 40 or x.value[\"totalkeepsell\"] > 2",
                "order": "lambda x: [-x.value[\"totalvolume\"], -x.value[\"totalsellratio\"]]",
                "limit": 20
            }
        )',

        # 4
        'Loader.parse_task(
            "./routers/tasks/HisItemAll.yaml",
            kwargs = {
                "opt": "twse",
                "targets": ["stock", "credit", "future", "trader"],
                "starttime": "datetime.utcnow() - timedelta(days=5)",
                "endtime": "datetime.utcnow()",
                "stockids": [],
                "traderids": [],
                "base": "stock",
                "order": [],
                "limit": 20
            }
        )',

        # 5
        'Loader.parse_task(
            "./routers/tasks/HisCredit.yaml",
            kwargs = {
                "opt": "otc",
                "targets": ["credit"],
                "starttime": "datetime.utcnow() - timedelta(days=10)",
                "endtime": "datetime.utcnow()",
                "stockids": "[i for i in iddb_tasks[\"otc\"]().stock.get_ids()]",
                "base": "stock",
                "constraint": "lambda x: x.value[\"ebearfinaratio\"] < 30",
                "order": "lambda x: [+x.value[\"ebearfinaratio\"], -x.value[\"totalbearishremain\"]]",
                "limit": 10
            }
        )',

        # 6
        'Loader.parse_task(
            "./routers/tasks/HisStock.yaml", 
            kwargs = {
                "opt": "otc",
                "targets": ["stock"],
                "starttime": "datetime.utcnow() - timedelta(days=15)",
                "endtime": "datetime.utcnow()",
                "stockids": "[i for i in iddb_tasks[\"otc\"]().stock.get_ids()]",
                "base": "stock",
                "constraint": "lambda x: x.value[\"eclose\"] > 30 and x.value[\"evolume\"] > 500",
                "order": "lambda x: [-x.value[\"totalvolume\"], -x.value[\"eclose\"]]",
                "limit": 10
            }
        )',

        # 7
        'Loader.parse_task(
            "./routers/tasks/HisFuture.yaml",
            kwargs = {
                "opt": "otc",
                "targets":  ["future"],
                "starttime": "datetime.utcnow() - timedelta(days=5)",
                "endtime": "datetime.utcnow()",
                "stockids": "[i for i in iddb_tasks[\"otc\"]().stock.get_ids()]",
                "base": "stock",
                "constraint": "lambda x: x.value[\"edfcdiff\"] > 0 or x.value[\"totalvolume\"] > 100",
                "order": "lambda x: [-x.value[\"edfcdiff\"], -x.value[\"totalvolume\"]]",
                "limit": 10
            }
        )',

        # 8
        'Loader.parse_task(
            "./routers/tasks/HisTrader.yaml",
            kwargs = {
                "opt": "otc",
                "targets": ["trader"],
                "starttime": "datetime.utcnow() - timedelta(days=5)",
                "endtime": "datetime.utcnow()",
                "stockids": [],
                "traderids": [],
                "base": "stock",
                "constraint": "lambda x: x.value[\"esellratio\"] > 40 or x.value[\"totalkeepsell\"] > 2",
                "order": "lambda x: [-x.value[\"totalvolume\"], -x.value[\"totalsellratio\"]]",
                "limit": 20
            }
        )',

        # 9
        'Loader.parse_task(
            "./routers/tasks/HisItemAll.yaml",
            kwargs = {
                "opt": "otc",
                "targets": ["stock", "credit", "future", "trader"],
                "starttime": "datetime.utcnow() - timedelta(days=5)",
                "endtime": "datetime.utcnow()",
                "stockids": [],
                "traderids": [],
                "base": "stock",
                "limit": 20
            }
        )'
    ]


